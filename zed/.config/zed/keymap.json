[
  {
    "context": "Workspace",
    "bindings": {
      "ctrl-n": "workspace::ToggleRightDock"
    }
  },
  {
    "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work in normal & visual mode
      "g h": "vim::FirstNonWhitespace",
      "g l": "vim::EndOfLine",
      "K": "editor::Hover",
      "H": "pane::ActivatePrevItem",
      "L": "pane::ActivateNextItem",
      "g e": "vim::EndOfDocument",
      "g y": "editor::GoToTypeDefinition",
      "g r": "editor::FindAllReferences", // zed specific
      "g t": "vim::WindowTop",
      "g c": "vim::WindowMiddle",
      "g b": "vim::WindowBottom",
      // Window mode
      "ctrl-w v": "pane::SplitRight",
      "ctrl-w d": "pane::SplitDown",
      // Space mode
      "space f": "file_finder::Toggle",
      "space k": "editor::Hover",
      "space s": "outline::Toggle",
      "space shift-s": "project_symbols::Toggle",
      "space d": "editor::GoToDiagnostic",
      "space shift-d": "diagnostics::Deploy",
      "space r": "editor::Rename",
      "space a": "editor::ToggleCodeActions",
      "space h": "editor::SelectAllMatches",
      "space t": "workspace::NewCenterTerminal",
      // Misc
      "ctrl-shift-k": "editor::MoveLineUp",
      "ctrl-shift-j": "editor::MoveLineDown",
      "ctrl-c": "editor::ToggleComments",
      ">": "editor::Indent",
      "<": "editor::Outdent",
      "ctrl-n": "workspace::ToggleRightDock"
    }
  },
  {
    "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
    "bindings": {
      // put key-bindings here if you want them to work only in normal mode
      // "down": ["workspace::SendKeystrokes", "4 j"]
      // "up": ["workspace::SendKeystrokes", "4 k"]
    }
  },
  {
    "context": "Editor && vim_mode == visual && !VimWaiting && !menu",
    "bindings": {
      // visual, visual line & visual block modes
      // ">": ["vim::Indent", "vim::RestoreVisualSelection"],
      // "<": ["vim::Outdent", "vim::RestoreVisualSelection"]
    }
  },
  {
    "context": "Editor && vim_mode == insert && !menu",
    "bindings": {
      // put key-bindings here if you want them to work in insert mode
      // e.g.
      // "j j": "vim::NormalBefore" // remap jj in insert mode to escape.
    }
  },
  {
    "context": "Editor && VimControl && !VimWaiting && !menu",
    "bindings": {
      "ctrl-j": ["vim::SwitchMode", "Normal"],
      "g n": "vim::SelectNext",
      "g N": "vim::SelectPrevious",
      "space w": "vim::NextSubwordStart",
      "space b": "vim::PreviousSubwordStart",
      "space e": "vim::NextSubwordEnd",
      "space g e": "vim::PreviousSubwordEnd",
      "alt-l": "pane::ActivateNextItem",
      "alt-h": "pane::ActivatePrevItem"
    }
  },
  {
    // escape is in its own section so that it cancels a pending count.
    "context": "Editor && vim_mode == normal && vim_operator == none && !VimWaiting",
    "bindings": {
      "ctrl-j": "editor::Cancel"
    }
  },
  {
    // escape is in its own section so that it cancels a pending count.
    "context": "Editor && vim_mode == visual && !VimWaiting && !VimObject",
    "bindings": {
      "ctrl-j": ["vim::SwitchMode", "Normal"],
      "shift-s": [
        "vim::PushOperator",
        {
          "AddSurrounds": {}
        }
      ]
    }
  },
  {
    // escape is in its own section so that it cancels a pending count.
    "context": "Editor && vim_mode == insert",
    "bindings": {
      "ctrl-j": "vim::NormalBefore"
    }
  },
  {
    "context": "Editor && VimWaiting",
    "bindings": {
      "ctrl-j": ["vim::SwitchMode", "Normal"]
    }
  },
  {
    "context": "BufferSearchBar && !in_replace",
    "bindings": {
      "ctrl-j": "buffer_search::Dismiss"
    }
  },
  {
    "context": "ProjectPanel && not_editing",
    "use_layout_keys": true,
    "bindings": {
      "ctrl-n": "workspace::ToggleRightDock",
      "ctrl-j": "project_panel::ToggleFocus",
      "a": "project_panel::NewFile",
      "d": "project_panel::Trash",
      "r": "project_panel::Rename",
      "P": "project_panel::SelectParent",
      "c": "project_panel::Copy",
      "p": "project_panel::Paste",
      "x": "project_panel::Cut",
      "Y": "project_panel::CopyRelativePath",
      "g y": "project_panel::CopyPath",
      "W": "project_panel::CollapseAllEntries"
    }
  },
  {
    "context": "Dock",
    "bindings": {
      "ctrl-w h": ["workspace::ActivatePaneInDirection", "Left"],
      "ctrl-w l": ["workspace::ActivatePaneInDirection", "Right"],
      "ctrl-w k": ["workspace::ActivatePaneInDirection", "Up"],
      "ctrl-w j": ["workspace::ActivatePaneInDirection", "Down"]
      // ... or other keybindings
    }
  }
]
